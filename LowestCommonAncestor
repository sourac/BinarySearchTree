package com.atul.ds;

public class LCABST {
	Node root;

	public LCABST() {
		this.root = null;
	}

	public static void main(String[] args) {
		LCABST tree = new LCABST();
		tree.root = new Node(20);
		tree.root.left = new Node(8);
		tree.root.right = new Node(22);
		tree.root.left.left = new Node(4);
		tree.root.left.right = new Node(12);
		tree.root.left.right.left = new Node(10);
		tree.root.left.right.right = new Node(14);

		int n1 = 10, n2 = 14;
		Node t = tree.lca(tree.root, n1, n2);
		System.out.println("LCA of " + n1 + " and " + n2 + " is " + t.key);
	}

	private Node lca(Node root, int n1, int n2) {
		if (root == null) {
			return null;
		}

		/*
		 * when n1 and n2 are smaller than the root,then Lca will be in the left
		 * side
		 */
		if (n1 < root.key && n2 < root.key)
			return lca(root.left, n1, n2);
		/*
		 * when n1 and n2 are greater than the root,then Lca will be in the left
		 * side
		 */
		if (n1 > root.key && n2 > root.key)
			return lca(root.right, n1, n2);
		/*when n1 < root and n2 greater than the root. then this node is the lca*/	
		if(n1 < root.key  && n2 > root.key)	
		return root;
	return root;
	}

}
